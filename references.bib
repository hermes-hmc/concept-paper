
@COMMENT {----------------------------- CITING, FAIR, POLICIES, GENERAL STUFF ----------------------------------}

@misc{ASCL-Software-Citation,
      title={Citation method, please? A case study in astrophysics}, 
      author={Alice Allen},
      year={2021},
      eprint={2111.12574},
      archivePrefix={arXiv},
      primaryClass={astro-ph.IM}
}

@online{ASCL-CaltechAMES,
  title        = {Software in the CaltechDATA Repository},
  author       = {Morrell, Thomas E.},
  year         = 2019,
  month        = {11},
  url          = {https://github.com/ASCLnet/SWRegistryWorkshop/blob/2cd02ad1862ebc67ad9fcb0347b832d10d8c7ca9/presentations/Caltech-Software-Presentation.pptx},
  place        = {University of Maryland}
}

@book{PeerJSoftVsDataCitation,
  title        = {Software vs. data in the context of citation},
  author       = {Katz, Daniel S. and Niemeyer, Kyle E. and Smith, Arfon M. and Anderson, William L. and Boettiger, Carl and Hinsen, Konrad and Hooft, Rob and Hucka, Michael and Lee, Allen and Löffler, Frank and Pollard, Tom and Rios, Fernando},
  year         = 2016,
  month        = {12},
  number       = {e2630v1},
  doi          = {10.7287/peerj.preprints.2630v1},
  url          = {https://peerj.com/preprints/2630},
  abstractnote = {Software is data, but it is not just data. While “data” in computing and information science can refer to anything that can be processed by a computer, software is a special kind of data that can be a creative, executable tool that operates on data. However, software and data are similar in that they both traditionally have not been cited in publications. This paper discusses the differences between software and data in the context of citation, by providing examples and referring to evidence in the form of citations.},
  institution  = {PeerJ Inc.}
}

@article{TrackingCitations,
  title        = {Practice meets Principle: Tracking Software and Data Citations to Zenodo DOIs},
  author       = {van de Sandt, Stephanie and Nielsen, Lars Holm and Ioannidis, Alexandros and Muench, August and Henneken, Edwin and Accomazzi, Alberto and Bigarella, Chiara and Lopez, Jose Benito Gonzalez and Dallmeier-Tiessen, Sünje},
  year         = 2019,
  month        = {11},
  journal      = {arXiv:1911.00295 [cs]},
  url          = {http://arxiv.org/abs/1911.00295},
  note         = {arXiv: 1911.00295},
  abstractnote = {Data and software citations are crucial for the transparency of research results and for the transmission of credit. But they are hard to track, because of the absence of a common citation standard. As a consequence, the FORCE11 recently proposed data and software citation principles as guidance for authors. Zenodo is recognized for the implementation of DOIs for software on a large scale. The minting of complementary DOIs for the version and concept allows measuring the impact of dynamic software. This article investigates characteristics of 5,456 citations to Zenodo data and software that were captured by the Asclepias Broker in January 2019. We analyzed the current state of data and software citation practices and the quality of software citation recommendations with regard to the impact of recent standardization efforts. Our findings prove that current citation practices and recommendations do not match proposed citation standards. We consequently suggest practical first steps towards the implementation of the software citation principles.}
}

@article{SoftCitePrinciples,
  title        = {Software citation principles},
  author       = {Smith, Arfon M. and Katz, Daniel S. and Niemeyer, Kyle E. and FORCE11 Software Citation Working Group},
  year         = 2016,
  journal      = {PeerJ Computer Science},
  volume       = 2,
  number       = {e86},
  doi          = {10.7717/peerj-cs.86},
  url          = {https://doi.org/10.7717/peerj-cs.86}
}

@misc{FAIR4RS-FreshLook,
  title={A Fresh Look at FAIR for Research Software}, 
  author={Daniel S. Katz and Morane Gruenpeter and Tom Honeyman and Lorraine Hwang and Mark D. Wilkinson and Vanessa Sochat and Hartwig Anzt and Carole Goble and for FAIR4RS Subgroup 1},
  year={2021},
  month        = {2},
  eprint={2101.10883},
  archivePrefix={arXiv},
  primaryClass={cs.SE},
  abstractnote = {This document captures the discussion and deliberation of the FAIR for Research Software (FAIR4RS) subgroup that took a fresh look at the applicability of the FAIR Guiding Principles for scientific data management and stewardship for research software. We discuss the vision of research software as ideally reproducible, open, usable, recognized, sustained and robust, and then review both the characteristic and practiced differences of research software and data. This vision and understanding of initial conditions serves as a backdrop for an attempt at translating and interpreting the guiding principles to more fully align with research software. We have found that many of the principles remained relatively intact as written, as long as considerable interpretation was provided. This was particularly the case for the “Findable” and “Accessible” foundational principles. We found that “Interoperability” and “Reusability” are particularly prone to a broad and sometimes opposing set of interpretations as written. We propose two new principles modeled on existing ones, and provide modified guiding text for these principles to help clarify our final interpretation. A series of gaps in translation were captured during this process, and these remain to be addressed. We finish with a consideration of where these translated principles fall short of the vision laid out in the opening.}
}

@unpublished{FAIR4RS-Principles,
  title        = {FAIR Principles for Research Software (FAIR4RS Principles)},
  author       = {Chue Hong, Neil P. and Katz, Daniel S. and Barker, Michelle and Lamprecht, Anna-Lena and Martinez, Carlos and Psomopoulos, Fotis E. and Harrow, Jen and Castro, Leyla Jael and Gruenpeter, Morane and Martinez, Paula Andrea and Honeyman, Tom and Struck, Alexander and Lee, Allen and Loewe, Axel and van Werkhove, Ben and Jones, Catherine and Garijo, Daniel and Plomp, Esther and Genova, Francoise and Shanahan, Hugh and Leng, Joanna and Hellström, Maggie and Sandström, Malin and Sinha, Manodeep and Kuzak, Mateusz and Herterich, Patricia and Zhang, Qian and Islam, Sharif and Sansone, Susanna-Assunta and Pollard, Tom and Atmojo, Udayanto Dwi and Williams, Alan and Czerniak, Andreas and Niehues, Anna and Fouilloux, Anne Claire and Desinghu, Bala and Goble, Carole and Richard, Céline and Gray, Charles and Erdmann, Chris and Nüst, Daniel and Tartarini, Daniele and Ranguelova, Elena and Anzt, Hartwig and Todorov, Ilian and McNally, James and Moldon, Javier and Burnett, Jessica and Garrido-Sánchez, Julián and Belhajjame, Khalid and Sesink, Laurents and Hwang, Lorraine and Tovani-Palone, Marcos Roberto and Wilkinson, Mark D. and Servillat, Mathieu and Liffers, Matthias and Fox, Merc and Miljković, Nadica and Lynch, Nick and Martinez Lavanchy, Paula and Gesing, Sandra and Stevens, Sarah and Martinez Cuesta, Sergio and Peroni, Silvio and Soiland-Reyes, Stian and Bakker, Tom and Rabemanantsoa, Tovo and Sochat, Vanessa and Yehudi, Yo},
  year         = 2021,
  doi          = {10.15497/RDA00065},
  url          = {https://doi.org/10.15497/RDA00065},
  note         = {Publisher: Research Data Alliance},
  abstractnote = {Research software is a fundamental and vital part of research worldwide, yet there remain significant challenges to software productivity, quality, reproducibility, and sustainability. Improving the practice of scholarship is a common goal of the open science, open source software and FAIR (Findable, Accessible, Interoperable and Reusable) communities, but improving the sharing of research software has not yet been a strong focus of the latter. To improve the FAIRness of research software, the FAIR for Research Software (FAIR4RS) Working Group has sought to understand how to apply the FAIR Guiding Principles for scientific data management and stewardship to research software, bringing together existing and new community efforts. Many of the FAIR Guiding Principles can be directly applied to research software by treating software and data as similar digital research objects. However, specific characteristics of software — such as its executability, composite nature, and continuous evolution and versioning — make it necessary to revise and extend the principles. This document presents the first version of the FAIR Principles for Research Software (FAIR4RS Principles). It is an outcome of the FAIR for Research Software Working Group (FAIR4RS WG). The FAIR for Research Software Working Group is jointly convened as an RDA Working Group, FORCE11 Working Group, and Research Software Alliance (ReSA) Task Force.}
}

@article{DFG-GRP19,
  title        = {Guidelines for Safeguarding Good Research Practice. Code of Conduct},
  author       = {Forschungsgemeinschaft, Deutsche},
  year         = 2019,
  month        = {9},
  doi          = {10.5281/zenodo.3923602},
  url          = {https://www.dfg.de/download/pdf/foerderung/rechtliche_rahmenbedingungen/gute_wissenschaftliche_praxis/kodex_gwp_en.pdf},
  abstractnote = {The DFG´s Code of Conduct “Safeguarding Good Research Practice” represents the consensus among the member organisations of the DFG on the fundamental principles and standards of good practice and are upheld by these organisations. These guidelines underline the importance of integrity in the everyday practice of research and provide researchers with a reliable reference with which to embed good research practice as an established and binding aspect of their work.}
}

@article{HelmholtzSWPolicy,
  title        = {Muster-Richtlinie Nachhaltige Forschungssoftware an den Helmholtz-Zentren},
  author       = {Task Group Forschungssoftware and Bach, Felix and Bertuch, Oliver and Busse, Christian and Castell, Wolfgang zu and Celo, Sabine and Denker, Michael and Dinkelacker, Stefan and Druskat, Stephan and Faber, Claas and Finke, Ants and Fritzsch, Bernadette and Hammitzsch, M. and Haseleu, Julia and Konrad, Uwe and Krupa, Jörn and Leifels, Yvonne and Mohns-Pöschke, Kerstin and Moravcikova, Martina and Nöller, Joachim and Möhl, Christoph and Nolden, Marco and Scheinert, Markus and Schelhaas, Ute and Scheliga, Katharina Sara and Schlauch, Tobias and Schnicke, Thomas and Scholz, Almut and Schwennsen, Florian and Seifarth, Jenny and Selzer, Michael and Shishatskiy, Sergey and Steglich, Dirk and Strohbach, Sandra and Terhorst, Dennis and Al-Turany, Mohammad and Vierkant, Paul and Wieser, Thomas and Witter, Ludwig and Wortmann, Daniel},
  year         = 2019,
  doi          = {10.2312/os.helmholtz.007},
  url          = {https://gfzpublic.gfz-potsdam.de/pubman/faces/ViewItemOverviewPage.jsp?itemId=item_4906899},
  note         = {Publisher: Helmholtz Open Science Office},
  abstractnote = {Autor: Task Group Forschungssoftware et al.; Genre: Sonstige; Final veröffentlicht: 2019; Open Access; Titel: Muster-Richtlinie Nachhaltige Forschungssoftware an den Helmholtz-Zentren}
}





@COMMENT {----------------------------- DEPOSITION ----------------------------------}

@article{SWORD,
  title        = {SWORD: Simple Web-service Offering Repository Deposit},
  author       = {Allinson, Julie and Francois, Sebastien and Lewis, Stuart},
  year         = 2008,
  journal      = {Ariadne},
  number       = 54,
  url          = {http://www.ariadne.ac.uk/issue/54/allinson-et-al/}
}





@COMMENT {----------------------------- SCHEMAS, ONTOLOGIES, STANDARDS, RFCs ----------------------------------}

@article{DataCiteSchema,
  title        = {DataCite Metadata Schema Documentation for the Publication and Citation of Research Data and Other Research Outputs v4.4},
  author       = {DataCite Metadata Working Group},
  year         = 2021,
  pages        = {82 pages},
  doi          = {10.14454/3W3Z-SA82},
  url          = {https://schema.datacite.org/meta/kernel-4.4/},
  note         = {Artwork Size: 82 pages Medium: application/pdf Publisher: DataCite Version Number: 4.4}
}

@article{RO-Crate,
  title        = {Packaging research artefacts with RO-Crate},
  author       = {Soiland-Reyes, Stian and Sefton, Peter and Crosas, Mercè and Castro, Leyla Jael and Coppens, Frederik and Fernández, José M. and Garijo, Daniel and Grüning, Björn and La Rosa, Marco and Leo, Simone and Carragáin, Eoghan Ó and Portier, Marc and Trisovic, Ana and RO-Crate Community and Groth, Paul and Goble, Carole},
  year         = 2021,
  month        = {8},
  doi          = {10.5281/ZENODO.5146228},
  isbn         = 9781315351148,
  url          = {https://zenodo.org/record/5146228},
  note         = {Publisher: Zenodo},
  abstractnote = {An increasing number of researchers support reproducibility by including pointers to and descriptions of datasets, software and methods in their publications. However, scientific articles may be ambiguous, incomplete and difficult to process by automated systems. In this paper we introduce RO-Crate, an open, community-driven, and lightweight approach to packaging research artefacts along with their metadata in a machine readable manner. RO-Crate is based on Schema.org annotations in JSON-LD, aiming to establish best practices to formally describe metadata in an accessible and practical way for their use in a wide variety of situations. An RO-Crate is a structured archive of all the items that contributed to a research outcome, including their identifiers, provenance, relations and annotations. As a general purpose packaging approach for data and their metadata, RO-Crate is used across multiple areas, including bioinformatics, digital humanities and regulatory sciences. By applying “just enough” Linked Data standards, RO-Crate simplifies the process of making research outputs FAIR while also contributes to enhancing research reproducibility. An RO-Crate for this article is available.}
}

@book{BagItRFC,
  title        = {The BagIt File Packaging Format (V1.0)},
  author       = {Kunze, J. and Littman, J. and Madden, E. and Scancella, J. and Adams, C.},
  year         = 2018,
  number       = {RFC8493},
  pages        = {RFC8493},
  doi          = {10.17487/RFC8493},
  url          = {https://www.rfc-editor.org/info/rfc8493},
  institution  = {RFC Editor}
}

@misc{W3C-RDF,
  title        = {RDF 1.1 Primer},
  url          = {https://www.w3.org/TR/rdf11-primer/}
}

@misc{W3C-JSON-LD,
  title        = {W3C JSON-LD},
  url          = {https://www.w3.org/TR/json-ld/}
}

@misc{W3C-RDF-Turtle,
  title        = {W3C RDF 1.1 Turtle},
  url          = {https://www.w3.org/TR/turtle/}
}

@misc{W3C-SPARQL,
  title        = {SPARQL Query Language for RDF},
  url          = {https://www.w3.org/TR/rdf-sparql-query/}
}

@article{SoftwareOntology,
  title        = {The Software Ontology (SWO): a resource for reproducibility in biomedical data analysis, curation and digital preservation},
  author       = {Malone, James and Brown, Andy and Lister, Allyson L. and Ison, Jon and Hull, Duncan and Parkinson, Helen and Stevens, Robert},
  year         = 2014,
  month        = {6},
  journal      = {Journal of Biomedical Semantics},
  volume       = 5,
  number       = 1,
  pages        = 25,
  doi          = {10.1186/2041-1480-5-25},
  url          = {https://doi.org/10.1186/2041-1480-5-25},
  abstractnote = {Biomedical ontologists to date have concentrated on ontological descriptions of biomedical entities such as gene products and their attributes, phenotypes and so on. Recently, effort has diversified to descriptions of the laboratory investigations by which these entities were produced. However, much biological insight is gained from the analysis of the data produced from these investigations, and there is a lack of adequate descriptions of the wide range of software that are central to bioinformatics. We need to describe how data are analyzed for discovery, audit trails, provenance and reproducibility.}
}

@misc{SoftDescOnto,
  title        = {The Software Description Ontology},
  author       = {Garijo, Daniel and Ratnakar, Varun and Gil, Yolanda and Khider, Deborah},
  year         = 2021,
  month        = {5},
  journal      = {The Software Description Ontology},
  url          = {https://w3id.org/okn/o/sd},
  abstractnote = {An ontology for describing software components, including their metadata (attribution, licensing, usage instructions, how to get support) and their inputs, outputs and variables. The ontology extends schema.org and CodeMeta vocabularies and is based on OntoSoft, which proposed a vocabulary for describing software by asking scientists questions.}
}

@book{DoapOntology,
  title        = {DOAP: Description Of A Project},
  author       = {Wilder-James, Edd},
  year         = 2021,
  month        = {11},
  url          = {https://github.com/ewilderj/doap},
  abstractnote = {RDF schema for describing software projects}
}

@article{SeonOntology,
  title        = {SEON: a pyramid of ontologies for software evolution and its applications},
  author       = {Würsch, Michael and Ghezzi, Giacomo and Hert, Matthias and Reif, Gerald and Gall, Harald C.},
  year         = 2012,
  month        = {11},
  journal      = {Computing},
  volume       = 94,
  number       = 11,
  pages        = {857–885},
  doi          = {10.1007/s00607-012-0204-1},
  url          = {https://doi.org/10.1007/s00607-012-0204-1},
  abstractnote = {The Semantic Web provides a standardized, well-established frameworkto define and work with ontologies. It is especially apt for machineprocessing. However, researchers in the field of software evolutionhave not really taken advantage of that so far. In this paper, weaddress the potential of representing software evolution knowledgewith ontologies and Semantic Web technology, such as Linked Data andautomated reasoning. We present Seon, a pyramid of ontologies forsoftware evolution, which describes stakeholders, their activities,artifacts they create, and the relations among all of them. We showthe use of evolution-specific ontologies for establishing a sharedtaxonomy of software analysis services, for defining extensiblemeta-models, for explicitly describing relationships amongartifacts, and for linking data such as code structures, issues(change requests), bugs, and basically any changes made to a systemover time. For validation, we discuss three different approaches,which are backed by Seon and enable semantically enriched softwareevolution analysis. These techniques have been fully implemented astools and cover software analysis with web services, a naturallanguage query interface for developers, and large-scale softwarevisualization.}
}





@COMMENT {----------------------------- SCHEMA.ORG & CODEMETA ----------------------------------}

@article{SchemaOrg,
  title        = {Schema.org: evolution of structured data on the web},
  author       = {Guha, R. V. and Brickley, Dan and Macbeth, Steve},
  year         = 2016,
  month        = {1},
  journal      = {Communications of the ACM},
  volume       = 59,
  number       = 2,
  pages        = {44–51},
  doi          = {10.1145/2844544},
  url          = {https://dl.acm.org/doi/10.1145/2844544},
  abstractnote = {Big data makes common schemas even more necessary.}
}

@book{CodeMetaSchema,
  title        = {CodeMeta: an exchange schema for software metadata. Version 2.0},
  author       = {Jones, Matthew B. and Boettiger, Carl and Mayes, Abby Cabunoc and Smith, Arfon and Slaughter, Peter and Niemeyer, Kyle and Gil, Yolanda and Fenner, Martin and Nowak, Krzysztof and Hahnel, Mark and Coy, Luke and Allen, Alice and Crosas, Mercè and Sands, Ashley and Hong, Neil Chue and Cruse, Patricia and Katz, Dan and Goble, Carole},
  year         = 2017,
  doi          = {10.5063/schema/codemeta-2.0},
  url          = {https://doi.org/10.5063/schema/codemeta-2.0},
  note         = {Published: KNB Data Repository}
}

@inproceedings{SoMEF,
  title        = {SoMEF: A Framework for Capturing Scientific Software Metadata from its Documentation},
  author       = {Mao, A. and Garijo, D. and Fakhraei, S.},
  year         = 2019,
  booktitle    = {2019 IEEE International Conference on Big Data (Big Data)},
  pages        = {3032–3037},
  doi          = {10.1109/BigData47090.2019.9006447},
  url          = {http://dgarijo.com/papers/SoMEF.pdf}
}





@COMMENT {----------------------------- CITATION FILE FORMAT ----------------------------------}

@article{CffSchema,
  title        = {Citation File Format},
  author       = {Druskat, Stephan and Spaaks, Jurriaan H. and Chue Hong, Neil and Haines, Robert and Baker, James and Bliven, Spencer and Willighagen, Egon and Pérez-Suárez, David and Konovalov, Alexander},
  year         = 2021,
  month        = {8},
  doi          = {10.5281/ZENODO.5171937},
  url          = {https://zenodo.org/record/5171937},
  note         = {Publisher: Zenodo Version Number: 1.2.0},
  abstractnote = {CITATION.cff files are plain text files with human- and machine-readable citation information for software. Code developers can include them in their repositories to let others know how to correctly cite their software. This is the specification for the Citation File Format.}
}

@article{FennerBlogCff,
  title        = {A step forward for software citation: GitHub’s enhanced software citation support},
  author       = {Fenner, Martin},
  year         = 2021,
  month        = {8},
  journal      = {Front Matter},
  doi          = {10.53731/r9531p1-97aq74v-ag78v},
  url          = {https://blog.front-matter.io/posts/step-forward-for-software-citation},
  abstractnote = {On August 19, GitHub announced software citation support in GitHub repositories. Citation information provided by users (using a CITATION.cff YAML file in the root directory of the default branch) is parsed and made available as bibtex file or formatted citation, ...}
}

@misc{CffSphinxExample,
    author = {Breitbach, Gisbert and Geyer, Beate and Kleeberg, Ulrike and Meyer, Elke and Onken, Reiner and Sommer, Philipp S.},
    title = {Binding Regulations for Storing Data as netCDF Files},
    url = {https://gitlab.hzdr.de/hcdc/hereon-netcdf/hereon-netcdf-en}
}




@COMMENT {----------------------------- SERVICES ----------------------------------}

@inproceedings{RSD-2018,
	address = {Amsterdam, Netherlands},
	title = {Painting the picture of software impact with the {Research} {Software} {Directory}},
	isbn = {978-1-5386-9156-4},
	url = {https://ieeexplore.ieee.org/abstract/document/8588632},
	doi = {10.1109/eScience.2018.00013},
	abstract = {In this lightning talk we will describe the Research Software Directory; a content management system that is tailored to research software with the goal of enabling a qualitative assessment of software impact and improving software findability.},
	booktitle = {2018 {IEEE} 14th {International} {Conference} on e-{Science} (e-{Science})},
	publisher = {IEEE},
	author = {Spaaks, Jurriaan H and Klaver, Tom and Verhoeven, Stefan and Maassen, Jason and Bakker, Tom and van der Ploeg, Atze and van Werkhoven, Ben and van Hage, Willem and van Nieuwpoort, Rob V},
	year = {2018},
	pages = {23--24},
}

@inproceedings{SWHArchive,
  title        = {Archiving and Referencing Source Code with Software Heritage},
  author       = {Di Cosmo, Roberto},
  year         = {2020},
  booktitle    = {Mathematical Software – ICMS 2020},
  publisher    = {Springer International Publishing},
  series       = {Lecture Notes in Computer Science},
  pages        = {362–373},
  doi          = {10.1007/978-3-030-52200-1_36},
  isbn         = {978-3-030-52200-1},
  place        = {Cham},
  abstractnote = {Software, and software source code in particular, is widely used in modern research. It must be properly archived, referenced, described and cited in order to build a stable and long lasting corpus of scientific knowledge. In this article we show how the Software Heritage universal source code archive provides a means to fully address the first two concerns, by archiving seamlessly all publicly available software source code, and by providing intrinsic persistent identifiers that allow to reference it at various granularities in a way that is at the same time convenient and effective.We call upon the research community to adopt widely this approach.},
  editor       = {Bigatti, Anna Maria and Carette, Jacques and Davenport, James H. and Joswig, Michael and de Wolff, Timo},
  collection   = {Lecture Notes in Computer Science}
}

@misc{Zenodo,
  doi = {10.25495/7GXK-RD71},
  url = {https://www.zenodo.org/},
  author = {{European Organization For Nuclear Research} and {OpenAIRE}},
  keywords = {FOS: Physical sciences, Publication, Dataset},
  language = {en},
  title = {Zenodo: Research. Shared.},
  publisher = {CERN},
  year = {2013},
  abstractnote = {Zenodo is a general purpose repository that enables researchers, scientists, projects and institutions to share, preserve and showcase multidisciplinary research results (data, software and publications) that are not part of the existing institutional or subject-based repositories of the research communities. It is founded in the trustworthy CERN data centre.}
}

@article{SARA,
  title        = {SARA-Dienst: Software langfristig verfügbar machen},
  author       = {Rapp, Franziska and Kombrink, Stefan and Kushnarenko, Volodymyr and Fratz, Matthias and Scharon, Daniel},
  year         = {2018},
  month        = {7},
  journal      = {o-bib : Das offene Bibliotheksjournal},
  pages        = {92--105},
  doi          = {10.5282/O-BIB/2018H2S92-105},
  url          = {https://www.o-bib.de/article/view/2018H2S92-105},
  note         = {Artwork Size: 92-105 Seiten Publisher: o-bib : Das offene Bibliotheksjournal / Herausgeber VDB},
  abstractnote = {Software spielt in vielen Disziplinen eine wichtige Rolle im Forschungsprozess. Sie ist entweder selbst Gegenstand der Forschung oder wird als Hilfsmittel zur Erfassung, Verarbeitung und Analyse von Forschungsdaten eingesetzt. Zur Nachvollziehbarkeit der durchgeführten Forschung sollte Software langfristig verfügbar gemacht werden. Im SARA-Projekt zwischen der Universität Konstanz und der Universität Ulm wird ein Dienst entwickelt, der versucht die Einschränkungen bereits bestehender Angebote aufzuheben. Dies beinhaltet u.a. die Möglichkeit, die gesamte Entwicklungshistorie auf einfache Weise mitzuveröffentlichen und für Dritte zur Online-Exploration anzubieten. Zudem bestimmen die Forschenden den Zeitpunkt und Umfang der zu archivierenden/veröffentlichenden Software-Artefakte selbst. Der SARA-Dienst sieht auch die Möglichkeit vor, eine Archivierung ohne Veröffentlichung vorzunehmen. Der geplante Dienst verbindet bereits bestehende Publikations- und Forschungsinfrastrukturen miteinander. Er ermöglicht aus der Arbeitsumgebung der Forschenden heraus eine Archivierung und Veröffentlichung von Software und unterstützt Forschende dabei, bereits prozessbegleitend Zwischenstände ihrer Forschung festzuhalten. Aufgrund seines modularen Aufbaus kann der SARA-Dienst in unterschiedlichen Szenarien zum Einsatz kommen, beispielsweise als kooperativer Dienst für mehrere Einrichtungen. Er stellt eine sinnvolle Ergänzung zu bestehenden Angeboten im Forschungsdatenmanagement dar. Software plays an important role in many scientific disciplines. Whether software itself is the research focus or whether software tools are used to create, process and analyse data – software should be available for the long term to make the research process reproducible. In the context of the SARA project conducted by the University of Konstanz and Ulm University, a service is being developed which aims to avoid restrictions of existing services. This includes the possibility to easily publish the whole change history and make it available for others to explore online. Additionally, the researchers decide when and what they want to archive/publish. The SARA service also allows for archiving of software without making it publicly accessible. It connects existing publication and research infrastructures. Researchers can trigger a publication of software from their research environment and are encouraged to publish software artefacts already during the research process. The new service can be used in various scenarios due to its modular design, for example as a cooperative service for several institutions. The SARA Service is a useful addition to already existing research data management services.}
}






@COMMENT {----------------------------- SOFTWARE CITATIONS ----------------------------------}

@software{sw:codemeta-generator,
  title        = {Codemeta Generator},
  author       = {Software Heritage},
  license      = {AGPL-3.0},
  year         = {2019},
  month        = {10},
  url          = {https://codemeta.github.io/codemeta-generator},
  repository   = {https://github.com/codemeta/codemeta-generator},
  abstractnote = {A (client-side) web application to generate CodeMeta documents (aka codemeta.json).}
}

@software{sw:cffconvert,
  title        = {cffconvert},
  author       = {Spaaks, Jurriaan H. and Klaver, Tom and Verhoeven, Stefan and Druskat, Stephan and Leoncio, Waldir, Netto},
  year         = {2021},
  month        = {9},
  license      = {Apache-2.0},
  doi          = {10.5281/zenodo.1162057},
  url          = {https://pypi.org/project/cffconvert/},
  repository   = {https://github.com/citation-file-format/cff-converter-python}
}

@software{sw:cffinit,
  title        = {cffinit},
  author       = {Spaaks, Jurriaan H. and Verhoeven, Stefan and Diblen, Faruk and Druskat, Stephan and Soares Siqueira, Abel and Garcia Gonzalez, Jesus},
  license      = {Apache-2.0},
  year         = {2021},
  month        = {11},
  doi          = {10.5281/zenodo.1404735},
  url          = {https://citation-file-format.github.io/cff-initializer-javascript},
  repository   = {https://github.com/citation-file-format/cff-initializer-javascript}
}

@softwaremodule{sw:codemeta-crosswalks,
  crossref     = {CodeMetaSchema},
  subtitle     = {Crosswalks},
  author       = {CodeMeta Authors},
  year         = {2020},
  url          = {https://codemeta.github.io/crosswalk/},
  repository   = {https://github.com/codemeta/codemeta/tree/master/crosswalks}
}

@software{sw:biblatex-software,
  title        = {biblatex-software},
  author       = {Di Cosmo, Roberto},
  year         = {2020},
  month        = {6},
  license      = {LPPL-1.3c},
  url          = {https://ctan.org/pkg/biblatex-software},
  repository   = {https://gitlab.inria.fr/gt-sw-citation/bibtex-sw-entry}
}

@software{sw:swh-save-action,
  title        = {swh-save-action},
  author       = {Druskat, Stephan},
  year         = {2021},
  license      = {MIT},
  url          = {https://github.com/marketplace/actions/save-to-software-heritage},
  repository   = {https://github.com/sdruskat/swh-save-action},
  abstractnote = {A GitHub Action that saves a GitHub repository to the Software Heritage Archive}
}

@software{sw:dataverse-uploader-action,
  title        = {Dataverse Uploader GitHub Action},
  author       = {Trisovic, Ana and Durbin, Philip},
  year         = {2021},
  license      = {MIT},
  url          = {https://github.com/marketplace/actions/dataverse-uploader-action},
  repository   = {https://github.com/IQSS/dataverse-uploader},
  abstractnote = {GitHub Action to publish repository content on Dataverse }
}

@software{sw:SoMEF,
  title        = {Software Metadata Extraction Framework (SoMEF)},
  author       = {Garijo, Daniel et al.},
  year         = 2019,
  month        = {10},
  license      = {MIT},
  doi          = {10.5281/zenodo.3477929},
  url          = {https://somef.readthedocs.io},
  repository   = {https://github.com/KnowledgeCaptureAndDiscovery/somef},
  abstractnote = {A command line interface for automatically extracting relevant information from readme files.}
}

@softwareversion{sw:codemeta2cff,
  title        = {CodeMeta2CFF},
  author       = {Morrell, Thomas E.},
  year         = 2021,
  month        = {7},
  publisher    = {CaltechDATA},
  license      = {BSD-3-Clause},
  institution  = {Caltech},
  doi          = {10.22002/D1.2048},
  url          = {http://dx.doi.org/10.22002/D1.2048},
  repository   = {https://github.com/caltechlibrary/codemeta2cff},
  abstractnote = {GitHub Action converting a codemeta file to CITATION.cff}
}

@softwareversion{sw:AMES,
  title        = {AMES},
  author       = {Morrell, Thomas E. and Doiel, Robert},
  year         = {2022},
  month        = {1},
  publisher    = {CaltechDATA},
  license      = {BSD-3-Clause},
  institution  = {Caltech},
  doi          = {10.22002/D1.8964},
  url          = {http://dx.doi.org/10.22002/D1.8964},
  repository   = {https://github.com/caltechlibrary/ames},
  abstractnote = {Manage metadata from different sources. The examples in the package are specific to Caltech repositories, but could be generalized. This package is currently in development and will have additional sources and matchers added over time.}
}

@software{sw:rsd,
    author = {Spaaks, Jurriaan H. and Klaver, Tom and Verhoeven, Stefan and Diblen, Faruk and Maassen, Jason and Tjong Kim Sang, Erik and Pawar, Pushpanjali and Meijer, Christiaan and Ridder, Lars and Kulik, Lode and Bakker, Tom and van Hees, Vincent and Bogaardt, Laurens and Mendrik, Adriënne and van Es, Bram and Attema, Jisk and van Hage, Willem and Ranguelova, Elena and van Nieuwpoort, Rob and Gey, Ronny and Zach, Hoskins},
    doi = {10.5281/zenodo.1154130},
    license = {Apache-2.0},
    month = {12},
    title = {Research Software Directory},
    url = {https://research-software.nl},
    repository = {https://github.com/research-software-directory/research-software-directory},
    year = {2020}
}

@softwaremodule{sw:swh-deposit-cli,
    title = {Software Heritage},
    subtitle = {Deposit},
    author = {Software Heritage},
    year = {2017},
    institution = {Inria},
    license = {GPL-3},
    url = {https://docs.softwareheritage.org/devel/swh-deposit/index.html},
    repository= {https://forge.softwareheritage.org/source/swh-deposit},
}

@software{sw:rodare-bridge,
    title = {Invenio-GitLab},
    author = {Tobias Huste},
    year = {2019},
    institution = {HZDR},
    license = {GPL-3},
    url = {https://rodare.hzdr.de},
    repository = {https://gitlab.hzdr.de/rodare/invenio-gitlab}
}

@software{sw:invenio-github,
    title = {Invenio-GitHub},
    author = {Invenio Software},
    year = {2021},
    institution = {CERN},
    license = {GPL-2.0},
    url = {https://invenio-github.readthedocs.io},
    repository = {https://github.com/inveniosoftware/invenio-github}
}

@article{sw:opencarp,
    title = {The {openCARP} simulation environment for cardiac electrophysiology},
    volume = {208},
    issn = {0169-2607},
    url = {https://www.sciencedirect.com/science/article/pii/S0169260721002972},
    doi = {https://doi.org/10.1016/j.cmpb.2021.106223},
    abstract = {Background and Objective: Cardiac electrophysiology is a medical specialty with a long and rich tradition of computational modeling. Nevertheless, no community standard for cardiac electrophysiology simulation software has evolved yet. Here, we present the openCARP simulation environment as one solution that could foster the needs of large parts of this community. Methods and Results: openCARP and the Python-based carputils framework allow developing and sharing simulation pipelines which automate in silico experiments including all modeling and simulation steps to increase reproducibility and productivity. The continuously expanding openCARP user community is supported by tailored infrastructure. Documentation and training material facilitate access to this complementary research tool for new users. After a brief historic review, this paper summarizes requirements for a high-usability electrophysiology simulator and describes how openCARP fulfills them. We introduce the openCARP modeling workflow in a multi-scale example of atrial fibrillation simulations on single cell, tissue, organ and body level and finally outline future development potential. Conclusion: As an open simulator, openCARP can advance the computational cardiac electrophysiology field by making state-of-the-art simulations accessible. In combination with the carputils framework, it offers a tailored software solution for the scientific community and contributes towards increasing use, transparency, standardization and reproducibility of in silico experiments.},
    journal = {Computer Methods and Programs in Biomedicine},
    author = {Plank, Gernot and Loewe, Axel and Neic, Aurel and Augustin, Christoph and Huang, Yung-Lin and Gsell, Matthias A. F. and Karabelas, Elias and Nothstein, Mark and Prassl, Anton J. and Sánchez, Jorge and Seemann, Gunnar and Vigmond, Edward J.},
    year = {2021},
    pages = {106223},
}

@softwaremodule{sw:opencarp-ci,
    crossref = { sw:opencarp },
    subtitle = { CI },
    institution = { KIT },
    license = { Apache-2.0 },
    url = {https://opencarp.org/},
    repository = { https://git.opencarp.org/openCARP/openCARP-CI }
}

@software{sw:zenodraft,
    title        = {zenodraft},
    author       = {Spaaks, Jurriaan H.},
    year         = 2021,
    month        = {7},
    publisher    = {Zenodo},
    license      = {Apache-2.0},
    doi          = {10.5281/ZENODO.5046392},
    url          = {https://zenodo.org/record/5046392},
    repository   = {https://github.com/zenodraft/zenodraft},
    abstractnote = {CLI to manage depositions on Zenodo or Zenodo Sandbox.}
}

@softwaremodule{sw:zenodraft-action,
    crossref     = {sw:zenodraft},
    subtitle     = {Zenodraft GitHub Action},
    url          = {https://github.com/marketplace/actions/zenodraft},
    repository   = {https://github.com/zenodraft/action},
    abstractnote = {GitHub Action to automate drafting depositions on Zenodo or Zenodo Sandbox.}
}


@article{jaySoftwareMustBe2021,
  title = {Software {{Must}} Be {{Recognised}} as an {{Important Output}} of {{Scholarly Research}}},
  author = {Jay, Caroline and Haines, Robert and Katz, Daniel S.},
  year = {2021},
  month = apr,
  journal = {International Journal of Digital Curation},
  volume = {16},
  number = {1},
  pages = {6},
  issn = {1746-8256},
  doi = {10.2218/ijdc.v16i1.745},
  abstract = {Software now lies at the heart of scholarly research. Here we argue that as well as being important from a methodological perspective, software should, in many instances, be recognised as an output of research, equivalent to an academic paper. The article discusses the different roles that software may play in research and highlights the relationship between software and research sustainability and reproducibility. It describes the challenges associated with the processes of citing and reviewing software, which differ from those used for papers. We conclude that whilst software outputs do not necessarily fit comfortably within the current publication model, there is a great deal of positive work underway that is likely to make an impact in addressing this.},
  copyright = {Copyright (c) 2021 Caroline Jay, Robert Haines, Daniel S. Katz},
  langid = {english}
}